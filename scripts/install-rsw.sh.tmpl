#!/bin/bash

# Remove OS provided R 
rpm -e R-core R-core-devel R-devel R

# Install and configure R
yum install -y epel-release
yum install -y java-1.8.0-openjdk-devel java-11-openjdk-devel

efsstring="EFS"

efsserver=`echo $efastring | cut -d ":" -f 1`
efsdir=`echo $efastring | cut -d ":" -f 1`

mkdir -p $efsdir
mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport $efssever:/ $efsdir

# Install a couple of engineering tools
yum install -y ccache screen Lmod

aws s3 cp s3://S3_BUCKETNAME/run.R /tmp

for R_VERSION in "$@" 
do
  echo "xxx R_VERSION : ${R_VERSION}"
  curl -O https://cdn.rstudio.com/r/centos-7/pkgs/R-${R_VERSION}-1-1.x86_64.rpm
  yum install -y R-${R_VERSION}-1-1.x86_64.rpm
  rpm -qp --requires R-${R_VERSION}-1-1.x86_64.rpm > /opt/R/$R_VERSION/.depends
  rm -f R-${R_VERSION}-1-1.x86_64.rpm 
  if [ ${R_VERSION:0:1} == '3' ]; then 
	export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk
  else 
	export JAVA_HOME=/usr/lib/jvm/java-11-openjdk
  fi
  /opt/R/$R_VERSION/bin/R CMD javareconf 
  /opt/R/$R_VERSION/bin/Rscript /tmp/run.R
done

# prepare renv package cache 
sudo mkdir -p /scratch/renv
cat << EOF > /tmp/acl
user::rwx
group::rwx
mask::rwx
other::rwx
default:user::rwx
default:group::rwx
default:mask::rwx
default:other::rwx
EOF

setfacl -R --set-file=/tmp/acl /scratch/renv


# Install RSWB
groupadd --system --gid 900 rstudio-server
useradd -s /bin/bash -m --system --gid rstudio-server --uid 900 rstudio-server
RSWB_VER=2022.07.0-548.pro5
curl -O https://download2.rstudio.org/server/centos7/x86_64/rstudio-workbench-rhel-${RSWB_VER}-x86_64.rpm
yum install -y rstudio-workbench-rhel-${RSWB_VER}-x86_64.rpm
rpm -qp --requires rstudio-workbench-rhel-${RSWB_VER}-x86_64.rpm /usr/lib/rstudio-server/.depends
rm -f rstudio-workbench-${RSWB_VER}-x86_64.rpm

for i in server launcher 
do 
mkdir -p /etc/systemd/system/rstudio-$i.service.d
mkdir -p /opt/rstudio/etc/rstudio
cat <<EOF > /etc/systemd/system/rstudio-$i.service.d/override.conf
[Service]
Environment="RSTUDIO_CONFIG_DIR=/opt/rstudio/etc/rstudio"
EOF
done

# Add sample user 
groupadd --system --gid 1001 rstudio
useradd -s /bin/bash -m --system --gid rstudio --uid 1001 rstudio

echo -e "rstudio\nrstudio" | passwd rstudio

# Add SLURM integration 
myip=`curl http://checkip.amazonaws.com`

mkdir -p /tmp/rstudio
mkdir -p /opt/rstudio/shared-storage

echo "RSTUDIO_DISABLE_PACKAGE_INSTALL_PROMPT=yes" > /etc/rstudio/launcher-env

cat > /tmp/rstudio/rserver.conf << EOF
# Shared storage
server-shared-storage-path=/opt/rstudio/shared-storage

# Launcher Config
launcher-address=127.0.0.1
launcher-port=5559
launcher-sessions-enabled=1
launcher-default-cluster=Slurm
launcher-sessions-callback-address=http://${myip}:8787
EOF

cat > /tmp/rstudio/launcher.conf<<EOF
[server]
address=127.0.0.1
port=5559
server-user=rstudio-server
admin-group=rstudio-server
authorization-enabled=1
thread-pool-size=4
enable-debug-logging=1

[cluster]
name=Slurm
type=Slurm

[cluster]
name=Local
type=Local

EOF

cat > /tmp/rstudio/launcher.slurm.profiles.conf<<EOF 
[*]
default-cpus=1
default-mem-mb=512
max-cpus=2
max-mem-mb=1024
EOF

cat > /tmp/rstudio/launcher.slurm.conf << EOF 
# Enable debugging
enable-debug-logging=1

# Basic configuration
slurm-service-user=slurm
slurm-bin-path=/opt/slurm/bin

# Singularity specifics
#constraints=Container=singularity-container

EOF

# Install VSCode
if [ ! -d /opt/rstudio/vscode ]; then
  # create directory to house code-server
  mkdir -p /opt/rstudio/vscode
  pushd /opt/rstudio/vscode

  # download the code server package
  wget https://rstd.io/vs-code-server-3-9-3 -O vs-code-server.tar.gz

  # extract code-server binary
  tar zxf vs-code-server.tar.gz --strip 1

  # remove the archive
  rm vs-code-server.tar.gz
  popd
  /opt/rstudio/vscode/bin/code-server --extensions-dir /opt/rstudio/vscode/extensions --install-extension ms-python.python
  curl -L https://rstd.io/vs-code-r-ext -o /tmp/Ikuyadeu.r-1.1.0.vsix.gz && gunzip /tmp/Ikuyadeu.r-1.1.0.vsix.gz
  /opt/rstudio/vscode/bin/code-server --extensions-dir /opt/rstudio/vscode/extensions --install-extension /tmp/Ikuyadeu.r-1.1.0.vsix
  rm -f /tmp/Ikuyadeu.r-1.1.0.vsix 
fi 

cat > /tmp/rstudio/vscode.conf << EOF
exe=/opt/rstudio/vscode/bin/code-server
enabled=1
default-session-cluster=Slurm
EOF

cp /tmp/rstudio/* /opt/rstudio/etc/rstudio
rm -rf /tmp/rstudio

systemctl daemon-reload
rstudio-server restart
rstudio-launcher restart

#little hack to get the memory allocation working

sed -i '/^include.*/i SrunPortRange=59000-59999' /opt/slurm/etc/slurm.conf

systemctl restart slurmctld

# Packages for R packages
yum install -y zeromq-devel 

grep slurm /etc/exports | sed 's/slurm/R/' | sudo tee -a /etc/exports 
grep slurm /etc/exports | sed 's/slurm/rstudio/' | sudo tee -a /etc/exports      
grep slurm /etc/exports | sed 's#/opt/slurm#/usr/lib/rstudio-server#' | sudo tee -a /etc/exports
grep slurm /etc/exports | sed 's#/opt/slurm#/scratch#' | sudo tee -a /etc/exports

exportfs -ar 

mount -a

rm -rf /etc/profile.d/modules.sh

#Install apptainer
export APPTAINER_VER=1.0.2
yum install https://github.com/apptainer/apptainer/releases/download/v${APPTAINER_VER}/apptainer-${APPTAINER_VER}.x86_64.rpm

#Configure container folder and export to nodes
mkdir -p /opt/apptainer/containers
grep slurm /etc/exports | sed 's#/opt/slurm#/opt/apptainer#' | sudo tee -a /etc/exports
exportfs -ar

aws s3 cp s3://S3_BUCKETNAME/run.R /tmp
aws s3 cp s3://S3_BUCKETNAME/r-session.bionic.sdef /tmp
aws s3 cp s3://S3_BUCKETNAME/r-session.centos7.sdef /tmp

aws s3 cp s3://S3_BUCKETNAME/spank.tgz /tmp

cd /tmp
tar xvfz spank.tgz
pushd slurm-singularity-exec
make && make install 
popd
rm -f spank.tgz

#( cd /tmp
#for i in *.sdef
#do
#/usr/bin/apptainer build /opt/apptainer/containers/${i/sdef/simg} $i
#done ) & 

#Install Singularity
yum install fuse2fs -y 
APPTAINER_VER="1.1.3"
yum install  https://github.com/apptainer/apptainer/releases/download/v${APPTAINER_VER}/apptainer-${APPTAINER_VER}-1.x86_64.rpm  https://github.com/apptainer/apptainer/releases/download/v${APPTAINER_VER}/apptainer-${APPTAINER_VER}-1.x86_64.rpm -y

